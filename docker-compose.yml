version: '3.8'

services:
  # Note: Using SQLite instead of PostgreSQL for consistency with local development
  # SQLite database will be stored in a volume for persistence

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: attacksurface_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    networks:
      - attacksurface_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flask Web Application
  web:
    build: .
    container_name: attacksurface_web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8077}:5000"
    environment:
      - FLASK_CONFIG=production
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      # Using SQLite instead of PostgreSQL for consistency
      # - DATABASE_URL=sqlite:///data/attacksurface.db (will use default from config.py)
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
    volumes:
      - app_data:/app/data
      - sqlite_data:/app/database  # SQLite database storage
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - attacksurface_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/dashboard/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: attacksurface_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8090}:80"
    volumes:
      - ./logs/nginx:/var/log/nginx
    command: |
      sh -c "
      cat > /etc/nginx/nginx.conf << 'EOF'
      events {
          worker_connections 1024;
      }
      http {
          upstream backend {
              server web:5000;
          }
          server {
              listen 80;
              location / {
                  proxy_pass http://backend;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
                  proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$$scheme;
              }
              location /health {
                  return 200 'healthy';
                  add_header Content-Type text/plain;
              }
          }
      }
      EOF
      nginx -g 'daemon off;'
      "
    depends_on:
      - web
    networks:
      - attacksurface_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (for background tasks)
  celery:
    build: .
    container_name: attacksurface_celery
    restart: unless-stopped
    command: celery -A celery_app.celery worker --loglevel=info
    environment:
      - FLASK_CONFIG=production
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      # Using SQLite instead of PostgreSQL for consistency
      # - DATABASE_URL=sqlite:///data/attacksurface.db (will use default from config.py)
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
    volumes:
      - app_data:/app/data
      - sqlite_data:/app/database  # SQLite database storage
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - attacksurface_network

volumes:
  redis_data:
    driver: local
  app_data:
    driver: local
  sqlite_data:
    driver: local

networks:
  attacksurface_network:
    driver: bridge
