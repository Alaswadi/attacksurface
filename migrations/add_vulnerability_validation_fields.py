#!/usr/bin/env python3
"""
Database migration script to add validation fields to Vulnerability model
This script adds the new fields needed for displaying all vulnerabilities
regardless of validation status.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from models import Vulnerability
from sqlalchemy import text

def run_migration():
    """Run the database migration to add validation fields"""
    app = create_app()
    
    with app.app_context():
        try:
            print("üîÑ Starting database migration for vulnerability validation fields...")
            
            # Check if columns already exist
            inspector = db.inspect(db.engine)
            existing_columns = [col['name'] for col in inspector.get_columns('vulnerability')]
            
            # Add new columns if they don't exist
            new_columns = [
                ('confidence_score', 'INTEGER DEFAULT 0'),
                ('is_validated', 'BOOLEAN DEFAULT FALSE'),
                ('validation_notes', 'TEXT'),
                ('template_name', 'VARCHAR(255)'),
                ('cvss_score', 'FLOAT'),
                ('asset_metadata', 'JSON')
            ]
            
            for column_name, column_def in new_columns:
                if column_name not in existing_columns:
                    print(f"‚ûï Adding column: {column_name}")
                    try:
                        # Use raw SQL for better compatibility
                        sql = f"ALTER TABLE vulnerability ADD COLUMN {column_name} {column_def}"
                        db.session.execute(text(sql))
                        db.session.commit()
                        print(f"‚úÖ Successfully added column: {column_name}")
                    except Exception as e:
                        print(f"‚ùå Failed to add column {column_name}: {str(e)}")
                        db.session.rollback()
                        # Continue with other columns
                        continue
                else:
                    print(f"‚è≠Ô∏è Column {column_name} already exists, skipping...")
            
            # Update existing vulnerabilities with default values
            print("üîÑ Updating existing vulnerabilities with default validation values...")
            
            try:
                # Set default values for existing records
                existing_vulns = Vulnerability.query.all()
                updated_count = 0
                
                for vuln in existing_vulns:
                    # Set default values if not already set
                    if vuln.confidence_score is None:
                        vuln.confidence_score = 50  # Default medium confidence
                    if vuln.is_validated is None:
                        vuln.is_validated = True  # Assume existing vulns were validated
                    if not vuln.template_name and vuln.title:
                        vuln.template_name = vuln.title  # Use title as template name
                    
                    updated_count += 1
                
                db.session.commit()
                print(f"‚úÖ Updated {updated_count} existing vulnerabilities with default values")
                
            except Exception as e:
                print(f"‚ùå Failed to update existing vulnerabilities: {str(e)}")
                db.session.rollback()
            
            print("‚úÖ Database migration completed successfully!")
            print("\nüìä Migration Summary:")
            print("- Added confidence_score field (INTEGER)")
            print("- Added is_validated field (BOOLEAN)")
            print("- Added validation_notes field (TEXT)")
            print("- Added template_name field (VARCHAR)")
            print("- Added cvss_score field (FLOAT)")
            print("- Added asset_metadata field (JSON)")
            print("- Updated existing vulnerabilities with default values")
            
        except Exception as e:
            print(f"‚ùå Migration failed: {str(e)}")
            db.session.rollback()
            return False
            
    return True

if __name__ == "__main__":
    print("üöÄ Running vulnerability validation fields migration...")
    success = run_migration()
    
    if success:
        print("\nüéâ Migration completed successfully!")
        print("You can now run Nuclei scans and see all vulnerabilities (validated and unvalidated) in the interface.")
    else:
        print("\nüí• Migration failed! Please check the error messages above.")
        sys.exit(1)
