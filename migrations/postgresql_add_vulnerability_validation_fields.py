#!/usr/bin/env python3
"""
PostgreSQL-specific database migration script to add validation fields to Vulnerability model
This script is designed to work with the Docker PostgreSQL environment.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from models import Vulnerability
from sqlalchemy import text
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def run_postgresql_migration():
    """Run the PostgreSQL database migration to add validation fields"""
    app = create_app()
    
    with app.app_context():
        try:
            logger.info("üîÑ Starting PostgreSQL database migration for vulnerability validation fields...")
            
            # Check if columns already exist
            check_columns_sql = """
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'vulnerability' 
            AND table_schema = 'public';
            """
            
            result = db.session.execute(text(check_columns_sql))
            existing_columns = [row[0] for row in result.fetchall()]
            
            logger.info(f"üìã Existing columns: {existing_columns}")
            
            # Define new columns with PostgreSQL-specific syntax
            new_columns = [
                ('confidence_score', 'INTEGER DEFAULT 0'),
                ('is_validated', 'BOOLEAN DEFAULT FALSE'),
                ('validation_notes', 'TEXT'),
                ('template_name', 'VARCHAR(255)'),
                ('cvss_score', 'REAL'),  # PostgreSQL uses REAL for float
                ('asset_metadata', 'JSONB')  # PostgreSQL uses JSONB for better performance
            ]
            
            # Add new columns if they don't exist
            for column_name, column_def in new_columns:
                if column_name not in existing_columns:
                    logger.info(f"‚ûï Adding column: {column_name}")
                    try:
                        sql = f"ALTER TABLE vulnerability ADD COLUMN {column_name} {column_def};"
                        db.session.execute(text(sql))
                        db.session.commit()
                        logger.info(f"‚úÖ Successfully added column: {column_name}")
                    except Exception as e:
                        logger.error(f"‚ùå Failed to add column {column_name}: {str(e)}")
                        db.session.rollback()
                        # Continue with other columns
                        continue
                else:
                    logger.info(f"‚è≠Ô∏è Column {column_name} already exists, skipping...")
            
            # Update existing vulnerabilities with default values
            logger.info("üîÑ Updating existing vulnerabilities with default validation values...")
            
            try:
                # Use raw SQL for better performance with large datasets
                update_sql = """
                UPDATE vulnerability 
                SET 
                    confidence_score = COALESCE(confidence_score, 50),
                    is_validated = COALESCE(is_validated, TRUE),
                    template_name = COALESCE(template_name, title)
                WHERE 
                    confidence_score IS NULL 
                    OR is_validated IS NULL 
                    OR template_name IS NULL;
                """
                
                result = db.session.execute(text(update_sql))
                updated_count = result.rowcount
                db.session.commit()
                
                logger.info(f"‚úÖ Updated {updated_count} existing vulnerabilities with default values")
                
            except Exception as e:
                logger.error(f"‚ùå Failed to update existing vulnerabilities: {str(e)}")
                db.session.rollback()
            
            # Verify the migration
            logger.info("üîç Verifying migration...")
            verify_sql = """
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'vulnerability' 
            AND column_name IN ('confidence_score', 'is_validated', 'validation_notes', 'template_name', 'cvss_score', 'asset_metadata')
            ORDER BY column_name;
            """
            
            result = db.session.execute(text(verify_sql))
            new_columns_info = result.fetchall()
            
            logger.info("üìä New columns verification:")
            for col_info in new_columns_info:
                logger.info(f"  - {col_info[0]}: {col_info[1]} (nullable: {col_info[2]}, default: {col_info[3]})")
            
            logger.info("‚úÖ PostgreSQL database migration completed successfully!")
            logger.info("\nüìä Migration Summary:")
            logger.info("- Added confidence_score field (INTEGER)")
            logger.info("- Added is_validated field (BOOLEAN)")
            logger.info("- Added validation_notes field (TEXT)")
            logger.info("- Added template_name field (VARCHAR)")
            logger.info("- Added cvss_score field (REAL)")
            logger.info("- Added asset_metadata field (JSONB)")
            logger.info("- Updated existing vulnerabilities with default values")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Migration failed: {str(e)}")
            db.session.rollback()
            return False

def check_migration_needed():
    """Check if migration is needed"""
    app = create_app()
    
    with app.app_context():
        try:
            # Try to query a new column to see if migration is needed
            test_sql = "SELECT confidence_score FROM vulnerability LIMIT 1;"
            db.session.execute(text(test_sql))
            logger.info("‚úÖ Migration already completed - new columns exist")
            return False
        except Exception:
            logger.info("üîÑ Migration needed - new columns don't exist")
            return True

if __name__ == "__main__":
    logger.info("üöÄ Running PostgreSQL vulnerability validation fields migration...")
    
    # Check if migration is needed
    if not check_migration_needed():
        logger.info("‚è≠Ô∏è Migration not needed - columns already exist")
        sys.exit(0)
    
    success = run_postgresql_migration()
    
    if success:
        logger.info("\nüéâ Migration completed successfully!")
        logger.info("You can now run Nuclei scans and see all vulnerabilities (validated and unvalidated) in the interface.")
    else:
        logger.info("\nüí• Migration failed! Please check the error messages above.")
        sys.exit(1)
