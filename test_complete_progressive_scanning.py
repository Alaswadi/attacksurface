#!/usr/bin/env python3
"""
Test script to verify complete progressive scanning workflow
Tests all stages: Subfinder ‚Üí httpx ‚Üí Nmap with real-time updates
"""

import sys
import time
import requests
import json
from datetime import datetime

def test_complete_progressive_scanning():
    """Test complete progressive scanning workflow with all stages"""
    print("üß™ TESTING COMPLETE PROGRESSIVE SCANNING WORKFLOW")
    print("=" * 60)
    
    base_url = "http://localhost:8077"
    test_domain = "example.com"  # Use a simple domain for testing
    
    # Test 1: Start progressive scanning
    print("\n1Ô∏è‚É£ STARTING COMPLETE PROGRESSIVE SCAN")
    print("-" * 50)
    
    try:
        response = requests.post(f"{base_url}/api/large-scale-scan-progressive", 
                               json={
                                   "domain": test_domain,
                                   "scan_type": "quick"
                               },
                               timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                task_id = data.get('task_id')
                print("‚úÖ Progressive scanning started successfully")
                print(f"üìã Task ID: {task_id}")
                print(f"üéØ Domain: {test_domain}")
                
                return monitor_complete_workflow(base_url, task_id, test_domain)
            else:
                print(f"‚ùå Progressive scanning API returned error: {data.get('error')}")
                return False
        else:
            print(f"‚ùå Progressive scanning API returned status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Progressive scanning API error: {str(e)}")
        return False

def monitor_complete_workflow(base_url, task_id, domain):
    """Monitor the complete progressive scanning workflow"""
    print(f"\n2Ô∏è‚É£ MONITORING COMPLETE PROGRESSIVE WORKFLOW")
    print("-" * 50)
    
    max_wait_time = 300  # 5 minutes for complete scan
    start_time = time.time()
    stages_seen = set()
    last_stage = None
    
    expected_stages = [
        'subdomain_discovery',
        'progressive_storage_subdomains', 
        'subdomains_stored',
        'http_probing',
        'http_probing_complete',
        'port_scanning',
        'port_scanning_complete',
        'finalizing',
        'completed'
    ]
    
    print(f"üìä Expected stages: {expected_stages}")
    print(f"‚è∞ Maximum wait time: {max_wait_time} seconds")
    print()
    
    while time.time() - start_time < max_wait_time:
        try:
            # Check task status
            response = requests.get(f"{base_url}/api/large-scale-scan-status/{task_id}", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                state = data.get('state', 'UNKNOWN')
                stage = data.get('stage', 'unknown')
                progress = data.get('progress', 0)
                message = data.get('message', '')
                
                # Only print if stage changed
                if stage != last_stage:
                    print(f"üîÑ Stage: {stage} | Progress: {progress}% | State: {state}")
                    if message:
                        print(f"   üí¨ {message}")
                    last_stage = stage
                
                stages_seen.add(stage)
                
                # Check for progressive updates
                progressive_update = data.get('progressive_update')
                if progressive_update:
                    update_type = progressive_update.get('type', 'unknown')
                    print(f"   üì° Progressive Update: {update_type}")
                    
                    # Log specific updates
                    if update_type == 'subdomains_discovered':
                        count = progressive_update.get('count', 0)
                        print(f"      ‚úÖ Discovered {count} subdomains")
                    elif update_type == 'subdomains_stored':
                        stored_count = progressive_update.get('stored_count', 0)
                        print(f"      üíæ Stored {stored_count} assets in database")
                    elif update_type == 'http_probing_complete':
                        alive_hosts = progressive_update.get('alive_hosts', 0)
                        print(f"      üåê Found {alive_hosts} alive hosts")
                    elif update_type == 'port_scanning_complete':
                        port_updated = progressive_update.get('port_updated', 0)
                        print(f"      üîç Updated {port_updated} assets with port data")
                
                # Check for completion
                if state == 'SUCCESS':
                    print(f"\n‚úÖ COMPLETE PROGRESSIVE SCANNING FINISHED!")
                    print(f"‚è∞ Total time: {time.time() - start_time:.1f} seconds")
                    return verify_complete_results(base_url, stages_seen, expected_stages, domain)
                
                # Check for failure
                elif state == 'FAILURE':
                    error = data.get('error', 'Unknown error')
                    print(f"\n‚ùå Progressive scanning failed: {error}")
                    return False
            
            time.sleep(3)  # Check every 3 seconds
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error monitoring progressive updates: {str(e)}")
            time.sleep(3)
    
    print(f"\n‚è∞ Progressive scanning monitoring timed out after {max_wait_time} seconds")
    print(f"üìä Stages completed: {list(stages_seen)}")
    return verify_partial_results(base_url, stages_seen, expected_stages, domain)

def verify_complete_results(base_url, stages_seen, expected_stages, domain):
    """Verify the complete progressive scanning results"""
    print(f"\n3Ô∏è‚É£ VERIFYING COMPLETE PROGRESSIVE RESULTS")
    print("-" * 50)
    
    # Check stage completion
    missing_stages = set(expected_stages) - stages_seen
    if missing_stages:
        print(f"‚ö†Ô∏è Missing stages: {list(missing_stages)}")
    else:
        print("‚úÖ All expected stages completed")
    
    # Check assets in database
    try:
        response = requests.get(f"{base_url}/api/assets", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            assets = data.get('assets', [])
            
            print(f"üìä Total assets in database: {len(assets)}")
            
            # Look for progressive scanning assets
            progressive_assets = [asset for asset in assets if 
                                asset.get('asset_metadata', {}).get('scan_source') == 'progressive_large_scale_orchestrator']
            
            print(f"üîÑ Progressive scanning assets: {len(progressive_assets)}")
            
            if progressive_assets:
                print("‚úÖ Progressive scanning assets found")
                
                # Check for different scan statuses
                status_counts = {}
                http_probe_count = 0
                port_data_count = 0
                
                for asset in progressive_assets:
                    asset_name = asset.get('name', 'Unknown')
                    metadata = asset.get('asset_metadata', {})
                    scan_status = metadata.get('scan_status', 'unknown')
                    
                    status_counts[scan_status] = status_counts.get(scan_status, 0) + 1
                    
                    # Check for HTTP probe data
                    if metadata.get('http_probe') and metadata.get('http_probe').get('status_code'):
                        http_probe_count += 1
                    
                    # Check for port data
                    if metadata.get('ports') and len(metadata.get('ports', [])) > 0:
                        port_data_count += 1
                    
                    print(f"   üìã {asset_name} | Status: {scan_status}")
                
                print(f"\nüìä Status distribution: {status_counts}")
                print(f"üåê Assets with HTTP probe data: {http_probe_count}")
                print(f"üîç Assets with port data: {port_data_count}")
                
                # Verify complete workflow
                workflow_complete = (
                    len(progressive_assets) > 0 and
                    http_probe_count > 0 and
                    port_data_count > 0 and
                    status_counts.get('completed', 0) > 0
                )
                
                if workflow_complete:
                    print("\nüéâ COMPLETE PROGRESSIVE WORKFLOW VERIFIED!")
                    print("‚úÖ Subfinder: Subdomains discovered and stored")
                    print("‚úÖ httpx: HTTP probing completed with status codes")
                    print("‚úÖ Nmap: Port scanning completed with port data")
                    print("‚úÖ Progressive updates: Real-time data population working")
                    return True
                else:
                    print("\n‚ö†Ô∏è Partial progressive workflow completed")
                    print(f"   - Assets found: {len(progressive_assets) > 0}")
                    print(f"   - HTTP data: {http_probe_count > 0}")
                    print(f"   - Port data: {port_data_count > 0}")
                    print(f"   - Completed status: {status_counts.get('completed', 0) > 0}")
                    return len(progressive_assets) > 0
            else:
                print("‚ùå No progressive scanning assets found")
                return False
        else:
            print(f"‚ùå Failed to retrieve assets: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verifying results: {str(e)}")
        return False

def verify_partial_results(base_url, stages_seen, expected_stages, domain):
    """Verify partial results if scan didn't complete"""
    print(f"\n3Ô∏è‚É£ VERIFYING PARTIAL PROGRESSIVE RESULTS")
    print("-" * 50)
    
    print(f"üìä Stages completed: {list(stages_seen)}")
    print(f"üìä Expected stages: {expected_stages}")
    
    # At minimum, we should have subdomain discovery
    if 'subdomain_discovery' in stages_seen:
        print("‚úÖ Subdomain discovery stage completed")
        return verify_complete_results(base_url, stages_seen, expected_stages, domain)
    else:
        print("‚ùå Subdomain discovery stage not completed")
        return False

def main():
    """Main test function"""
    print("üöÄ STARTING COMPLETE PROGRESSIVE SCANNING TEST")
    print("=" * 60)
    print(f"‚è∞ Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Run test
    success = test_complete_progressive_scanning()
    
    # Final results
    print("\n" + "=" * 60)
    print("üéØ FINAL TEST RESULTS")
    print("=" * 60)
    
    if success:
        print("üéâ OVERALL RESULT: ‚úÖ COMPLETE PROGRESSIVE SCANNING WORKING")
        print("‚úÖ Subfinder: Subdomain discovery working!")
        print("‚úÖ httpx: HTTP probing working!")
        print("‚úÖ Nmap: Port scanning working!")
        print("‚úÖ Progressive updates: Real-time data population working!")
        print("‚úÖ Database storage: Assets stored with complete metadata!")
        print("\nüéØ Complete progressive scanning workflow verified:")
        print("   1. Subfinder discovers subdomains ‚Üí immediate storage")
        print("   2. httpx probes HTTP services ‚Üí progressive HTTP data")
        print("   3. Nmap scans ports ‚Üí progressive port data")
        print("   4. All assets marked as completed")
        print("   5. Real-time updates via Server-Sent Events")
        print("\nüìã The complete progressive scanning is now working!")
    else:
        print("‚ùå OVERALL RESULT: COMPLETE PROGRESSIVE SCANNING ISSUES")
        print("Please check the detailed output above for specific problems.")
        print("Some stages of the progressive scanning may not be working correctly.")
    
    print(f"‚è∞ Test completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
