#!/usr/bin/env python3
"""
Test script to manually create a vulnerability for testing the vulnerabilities page
"""

from app import create_app
from models import db, Asset, Vulnerability, Organization, AssetType, SeverityLevel
from datetime import datetime

def create_test_vulnerability():
    """Create a test vulnerability for testing the vulnerabilities page"""
    
    app = create_app()
    
    with app.app_context():
        try:
            # Get the first organization (assuming user has one)
            org = Organization.query.first()
            if not org:
                print("❌ No organization found. Please create a user account first.")
                return
            
            print(f"✅ Found organization: {org.name} (ID: {org.id})")
            
            # Create or find a test asset
            test_asset = Asset.query.filter_by(
                name="pwp2.vns.agency",
                organization_id=org.id
            ).first()
            
            if not test_asset:
                # Create test asset
                test_asset = Asset(
                    name="pwp2.vns.agency",
                    asset_type=AssetType.DOMAIN,
                    organization_id=org.id,
                    discovered_at=datetime.now(),
                    is_active=True,
                    asset_metadata={
                        'scan_source': 'manual_test',
                        'created_for': 'vulnerability_testing'
                    }
                )
                db.session.add(test_asset)
                db.session.commit()
                print(f"✅ Created test asset: {test_asset.name}")
            else:
                print(f"✅ Found existing asset: {test_asset.name}")
            
            # Check if vulnerability already exists
            existing_vuln = Vulnerability.query.filter_by(
                title="Clockwork PHP page exposure",
                asset_id=test_asset.id
            ).first()
            
            if existing_vuln:
                print(f"⚠️ Vulnerability already exists: {existing_vuln.title}")
                return
            
            # Create test vulnerability
            test_vulnerability = Vulnerability(
                title="Clockwork PHP page exposure",
                description="Clockwork php page was exposed, which allows admins to profile and debug the application, view database queries, HTTP requests, and other sensitive information.",
                severity=SeverityLevel.MEDIUM,
                asset_id=test_asset.id,
                organization_id=org.id,
                discovered_at=datetime.now(),
                is_resolved=False
            )
            
            db.session.add(test_vulnerability)
            db.session.commit()
            
            print(f"✅ Created test vulnerability: {test_vulnerability.title}")
            print(f"   - Severity: {test_vulnerability.severity.value}")
            print(f"   - Asset: {test_asset.name}")
            print(f"   - Organization: {org.name}")
            print(f"   - ID: {test_vulnerability.id}")
            
            # Verify the vulnerability was created
            vuln_count = Vulnerability.query.filter_by(organization_id=org.id).count()
            print(f"📊 Total vulnerabilities for organization: {vuln_count}")
            
            print("\n🎉 Test vulnerability created successfully!")
            print("   You can now visit /vulnerabilities to see it in the UI")
            
        except Exception as e:
            print(f"❌ Error creating test vulnerability: {str(e)}")
            db.session.rollback()

if __name__ == "__main__":
    create_test_vulnerability()
