#!/usr/bin/env python3
"""
Test script to verify vulnerability validation changes
This script creates sample vulnerabilities with different validation statuses
to test the new functionality.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from models import Vulnerability, Asset, Organization, User, SeverityLevel, AssetType
from datetime import datetime

def create_test_vulnerabilities():
    """Create test vulnerabilities with different validation statuses"""
    app = create_app()
    
    with app.app_context():
        try:
            print("üîÑ Creating test vulnerabilities...")
            
            # Get or create test user and organization
            test_user = User.query.filter_by(username='test').first()
            if not test_user:
                print("‚ùå Test user not found. Please create a user first.")
                return False
            
            org = Organization.query.filter_by(user_id=test_user.id).first()
            if not org:
                print("‚ùå Test organization not found. Please create an organization first.")
                return False
            
            # Get or create test asset
            test_asset = Asset.query.filter_by(
                name='test.example.com',
                organization_id=org.id
            ).first()
            
            if not test_asset:
                test_asset = Asset(
                    name='test.example.com',
                    asset_type=AssetType.DOMAIN,
                    organization_id=org.id,
                    discovered_at=datetime.now(),
                    is_active=True
                )
                db.session.add(test_asset)
                db.session.commit()
                print("‚úÖ Created test asset: test.example.com")
            
            # Sample vulnerabilities with different validation statuses
            test_vulnerabilities = [
                {
                    'title': 'Web Configuration File - Detect',
                    'description': 'Clockwork PHP page was exposed which allows admins to profile and debug the application, view database queries, HTTP requests, and other sensitive information.',
                    'severity': SeverityLevel.INFO,
                    'confidence_score': 63,
                    'is_validated': False,
                    'template_name': 'web-config-detect',
                    'cvss_score': 3.1
                },
                {
                    'title': 'Clockwork PHP page exposure',
                    'description': 'Clockwork PHP debugging interface is exposed, potentially revealing sensitive application information.',
                    'severity': SeverityLevel.HIGH,
                    'confidence_score': 90,
                    'is_validated': False,
                    'template_name': 'clockwork-php-exposure',
                    'cvss_score': 7.5
                },
                {
                    'title': 'Apache HTTP Server Test Page',
                    'description': 'Default Apache test page detected, indicating potential misconfiguration.',
                    'severity': SeverityLevel.LOW,
                    'confidence_score': 85,
                    'is_validated': True,
                    'template_name': 'apache-test-page',
                    'cvss_score': 2.3
                },
                {
                    'title': 'SSL Certificate Transparency',
                    'description': 'SSL certificate information exposed through Certificate Transparency logs.',
                    'severity': SeverityLevel.INFO,
                    'confidence_score': 95,
                    'is_validated': True,
                    'template_name': 'ssl-cert-transparency',
                    'cvss_score': 0.0
                },
                {
                    'title': 'Directory Listing Enabled',
                    'description': 'Directory listing is enabled on the web server, potentially exposing sensitive files.',
                    'severity': SeverityLevel.MEDIUM,
                    'confidence_score': 45,
                    'is_validated': False,
                    'template_name': 'directory-listing',
                    'cvss_score': 5.3
                }
            ]
            
            created_count = 0
            for vuln_data in test_vulnerabilities:
                # Check if vulnerability already exists
                existing_vuln = Vulnerability.query.filter_by(
                    title=vuln_data['title'],
                    asset_id=test_asset.id,
                    organization_id=org.id
                ).first()
                
                if not existing_vuln:
                    vulnerability = Vulnerability(
                        title=vuln_data['title'],
                        description=vuln_data['description'],
                        severity=vuln_data['severity'],
                        asset_id=test_asset.id,
                        organization_id=org.id,
                        discovered_at=datetime.now(),
                        confidence_score=vuln_data['confidence_score'],
                        is_validated=vuln_data['is_validated'],
                        template_name=vuln_data['template_name'],
                        cvss_score=vuln_data['cvss_score'],
                        is_resolved=False,
                        asset_metadata=vuln_data  # Store raw data
                    )
                    db.session.add(vulnerability)
                    created_count += 1
                    
                    validation_status = "‚úÖ VALIDATED" if vuln_data['is_validated'] else "‚ö†Ô∏è UNVALIDATED"
                    print(f"{validation_status}: {vuln_data['title']} (confidence: {vuln_data['confidence_score']}%)")
                else:
                    print(f"‚è≠Ô∏è Skipping existing vulnerability: {vuln_data['title']}")
            
            db.session.commit()
            print(f"\n‚úÖ Created {created_count} test vulnerabilities")
            
            # Print summary
            all_vulns = Vulnerability.query.filter_by(organization_id=org.id).all()
            validated_count = len([v for v in all_vulns if v.is_validated])
            unvalidated_count = len([v for v in all_vulns if not v.is_validated])
            
            print(f"\nüìä Vulnerability Summary:")
            print(f"- Total vulnerabilities: {len(all_vulns)}")
            print(f"- Validated: {validated_count}")
            print(f"- Unvalidated: {unvalidated_count}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to create test vulnerabilities: {str(e)}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("üß™ Creating test vulnerabilities to verify validation functionality...")
    success = create_test_vulnerabilities()
    
    if success:
        print("\nüéâ Test vulnerabilities created successfully!")
        print("You can now visit the vulnerabilities page to see both validated and unvalidated vulnerabilities.")
        print("Try using the validation filter to see the difference.")
    else:
        print("\nüí• Failed to create test vulnerabilities!")
        sys.exit(1)
